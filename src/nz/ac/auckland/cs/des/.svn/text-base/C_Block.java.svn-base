package nz.ac.auckland.cs.des;

import java.lang.*;


public class C_Block extends Object 
{
	static int	des_spe_table[] = 
	{
		0x20022000,
		0x20000000,
		0x00000000,
		0x20022000,
		0x00000000,
		0x20022000,
		0x20000000,
		0x00000000,
		0x20022000,
		0x20022000,
		0x20000000,
		0x00022000,
		0x00022000,
		0x00000000,
		0x00000000,
		0x20000000,
		0x20000000,
		0x00000000,
		0x00022000,
		0x20022000,
		0x20022000,
		0x20000000,
		0x00022000,
		0x00022000,
		0x00000000,
		0x00022000,
		0x20022000,
		0x20000000,
		0x00022000,
		0x00022000,
		0x20000000,
		0x00000000,
		0x00000000,
		0x20022000,
		0x00022000,
		0x20000000,
		0x20022000,
		0x20000000,
		0x00022000,
		0x00022000,
		0x20000000,
		0x00022000,
		0x20022000,
		0x00000000,
		0x20022000,
		0x00000000,
		0x00000000,
		0x20000000,
		0x20022000,
		0x20022000,
		0x20000000,
		0x00022000,
		0x00000000,
		0x00022000,
		0x20000000,
		0x00000000,
		0x20000000,
		0x00000000,
		0x00022000,
		0x20022000,
		0x00000000,
		0x20000000,
		0x00022000,
		0x20022000,
		0x00000802,
		0x00000002,
		0x08000800,
		0x08000802,
		0x00000800,
		0x08000002,
		0x08000002,
		0x08000800,
		0x08000002,
		0x00000802,
		0x00000802,
		0x08000000,
		0x08000800,
		0x00000800,
		0x00000000,
		0x08000002,
		0x00000002,
		0x08000000,
		0x00000800,
		0x00000002,
		0x08000802,
		0x00000802,
		0x08000000,
		0x00000800,
		0x08000000,
		0x00000000,
		0x00000002,
		0x08000802,
		0x00000000,
		0x08000800,
		0x08000802,
		0x00000000,
		0x00000000,
		0x08000802,
		0x00000800,
		0x08000002,
		0x00000802,
		0x00000002,
		0x08000000,
		0x00000800,
		0x08000802,
		0x00000000,
		0x00000002,
		0x08000800,
		0x08000002,
		0x08000000,
		0x08000800,
		0x00000802,
		0x08000802,
		0x00000002,
		0x00000802,
		0x08000800,
		0x00000800,
		0x08000000,
		0x08000002,
		0x00000000,
		0x00000002,
		0x00000800,
		0x08000800,
		0x00000802,
		0x08000000,
		0x08000802,
		0x00000000,
		0x08000002,
		0x02200004,
		0x00000000,
		0x02200000,
		0x00000000,
		0x00000004,
		0x02200004,
		0x02200000,
		0x02200000,
		0x02200000,
		0x00000004,
		0x00000004,
		0x02200000,
		0x00000004,
		0x02200000,
		0x00000000,
		0x00000004,
		0x00000000,
		0x02200004,
		0x00000004,
		0x02200000,
		0x02200004,
		0x00000000,
		0x00000000,
		0x00000004,
		0x02200004,
		0x02200004,
		0x02200000,
		0x00000004,
		0x00000000,
		0x00000000,
		0x02200004,
		0x02200004,
		0x00000004,
		0x02200000,
		0x02200000,
		0x02200004,
		0x02200004,
		0x00000004,
		0x00000004,
		0x00000000,
		0x00000000,
		0x02200004,
		0x00000000,
		0x00000004,
		0x02200000,
		0x00000000,
		0x02200004,
		0x02200004,
		0x02200000,
		0x02200000,
		0x00000000,
		0x00000004,
		0x00000004,
		0x02200004,
		0x02200000,
		0x00000000,
		0x00000004,
		0x00000000,
		0x02200004,
		0x02200000,
		0x02200004,
		0x00000004,
		0x00000000,
		0x02200000,
		0x01100004,
		0x00000000,
		0x00000004,
		0x01100004,
		0x01100000,
		0x00000000,
		0x01100000,
		0x00000004,
		0x00000000,
		0x01100004,
		0x00000000,
		0x01100000,
		0x00000004,
		0x01100004,
		0x01100004,
		0x00000000,
		0x00000004,
		0x01100000,
		0x01100004,
		0x00000000,
		0x00000004,
		0x01100000,
		0x00000000,
		0x00000004,
		0x01100000,
		0x00000004,
		0x01100004,
		0x01100000,
		0x01100000,
		0x00000004,
		0x00000000,
		0x01100004,
		0x00000004,
		0x01100004,
		0x01100000,
		0x00000004,
		0x01100004,
		0x00000004,
		0x01100000,
		0x00000000,
		0x01100000,
		0x00000000,
		0x00000004,
		0x01100004,
		0x00000000,
		0x01100000,
		0x00000004,
		0x01100000,
		0x01100004,
		0x00000000,
		0x00000000,
		0x01100000,
		0x00000000,
		0x01100004,
		0x00000004,
		0x01100004,
		0x01100004,
		0x00000004,
		0x00000000,
		0x01100000,
		0x01100000,
		0x00000000,
		0x01100004,
		0x00000004,
		0x00000000,
		0x10000400,
		0x00000400,
		0x00000400,
		0x10000000,
		0x00000000,
		0x00000400,
		0x10000400,
		0x00000400,
		0x10000000,
		0x10000000,
		0x00000000,
		0x10000400,
		0x00000400,
		0x00000000,
		0x10000000,
		0x00000000,
		0x10000000,
		0x10000400,
		0x00000400,
		0x00000400,
		0x10000400,
		0x10000000,
		0x00000000,
		0x10000000,
		0x00000400,
		0x10000400,
		0x10000000,
		0x10000400,
		0x00000000,
		0x00000000,
		0x10000400,
		0x10000400,
		0x00000400,
		0x00000000,
		0x10000000,
		0x00000400,
		0x10000000,
		0x10000000,
		0x00000400,
		0x00000000,
		0x10000400,
		0x10000400,
		0x10000000,
		0x10000000,
		0x00000000,
		0x10000400,
		0x00000000,
		0x10000400,
		0x00000000,
		0x00000000,
		0x10000400,
		0x10000000,
		0x00000400,
		0x00000400,
		0x10000400,
		0x00000400,
		0x00000000,
		0x10000000,
		0x00000400,
		0x00000000,
		0x10000400,
		0x00000400,
		0x10000000,
		0x04011000,
		0x00011001,
		0x00000000,
		0x04011000,
		0x04000001,
		0x00011000,
		0x04011000,
		0x00000001,
		0x00011000,
		0x00000001,
		0x00011001,
		0x04000000,
		0x04011001,
		0x04000000,
		0x04000000,
		0x04011001,
		0x00000000,
		0x04000001,
		0x00011001,
		0x00000000,
		0x04000000,
		0x04011001,
		0x00000001,
		0x04011000,
		0x04011001,
		0x00011000,
		0x04000001,
		0x00011001,
		0x00000001,
		0x00000000,
		0x00011000,
		0x04000001,
		0x00011001,
		0x00000000,
		0x04000000,
		0x00000001,
		0x04000000,
		0x04000001,
		0x00011001,
		0x04011000,
		0x00000000,
		0x00011001,
		0x00000001,
		0x04011001,
		0x04000001,
		0x00011000,
		0x04011001,
		0x04000000,
		0x04000001,
		0x04011000,
		0x00011000,
		0x04011001,
		0x00000001,
		0x00011000,
		0x04011000,
		0x00000001,
		0x00011000,
		0x00000000,
		0x04011001,
		0x04000000,
		0x04011000,
		0x04000001,
		0x00000000,
		0x00011001,
		0x00040002,
		0x00040000,
		0x00000002,
		0x00040002,
		0x00000000,
		0x00000000,
		0x00040002,
		0x00000002,
		0x00040000,
		0x00000002,
		0x00000000,
		0x00040002,
		0x00000002,
		0x00040002,
		0x00000000,
		0x00000000,
		0x00000002,
		0x00040000,
		0x00040000,
		0x00000002,
		0x00040000,
		0x00040002,
		0x00000000,
		0x00040000,
		0x00040002,
		0x00000000,
		0x00000002,
		0x00040000,
		0x00040000,
		0x00000002,
		0x00040002,
		0x00000000,
		0x00000002,
		0x00040002,
		0x00000000,
		0x00000002,
		0x00040000,
		0x00040000,
		0x00000002,
		0x00000000,
		0x00040002,
		0x00000000,
		0x00040000,
		0x00000002,
		0x00000000,
		0x00000002,
		0x00040000,
		0x00040000,
		0x00000000,
		0x00040002,
		0x00040002,
		0x00000000,
		0x00040002,
		0x00000002,
		0x00040000,
		0x00040002,
		0x00000002,
		0x00040000,
		0x00000000,
		0x00040002,
		0x00040002,
		0x00000000,
		0x00000002,
		0x00040000,
		0x20000110,
		0x00040000,
		0x20000000,
		0x20040110,
		0x00000000,
		0x00040110,
		0x20040000,
		0x20000110,
		0x00040110,
		0x20040000,
		0x00040000,
		0x20000000,
		0x20040000,
		0x20000110,
		0x00000110,
		0x00040000,
		0x20040110,
		0x00000110,
		0x00000000,
		0x20000000,
		0x00000110,
		0x20040000,
		0x00040110,
		0x00000000,
		0x20000000,
		0x00000000,
		0x20000110,
		0x00040110,
		0x00040000,
		0x20040110,
		0x20040110,
		0x00000110,
		0x20040110,
		0x20000000,
		0x00000110,
		0x20040000,
		0x00000110,
		0x00040000,
		0x20000000,
		0x00040110,
		0x20040000,
		0x00000000,
		0x00000000,
		0x20000110,
		0x00000000,
		0x20040110,
		0x00040110,
		0x00000000,
		0x00040000,
		0x20040110,
		0x20000110,
		0x00000110,
		0x20040110,
		0x20000000,
		0x00040000,
		0x20000110,
		0x20000110,
		0x00000110,
		0x00040110,
		0x20040000,
		0x20000000,
		0x00040000,
		0x20040000,
		0x00040110,
		0x00000000,
		0x04000000,
		0x00011000,
		0x04011008,
		0x04000008,
		0x00011000,
		0x04011008,
		0x04000000,
		0x04000000,
		0x00000008,
		0x00000008,
		0x04011000,
		0x00011008,
		0x04000008,
		0x04011000,
		0x00000000,
		0x04011000,
		0x00000000,
		0x04000008,
		0x00011008,
		0x00011000,
		0x04011008,
		0x00000000,
		0x00000008,
		0x00000008,
		0x00011008,
		0x04011008,
		0x04000008,
		0x04000000,
		0x00011000,
		0x00011008,
		0x04011000,
		0x04011000,
		0x00011008,
		0x04000008,
		0x04000000,
		0x04000000,
		0x00000008,
		0x00000008,
		0x00011000,
		0x00000000,
		0x04011000,
		0x04011008,
		0x00000000,
		0x04011008,
		0x00000000,
		0x00011000,
		0x04000008,
		0x00011008,
		0x00011000,
		0x00000000,
		0x04011008,
		0x04000008,
		0x04011000,
		0x00011008,
		0x04000000,
		0x04011000,
		0x04000008,
		0x00011000,
		0x00011008,
		0x00000008,
		0x04011008,
		0x04000000,
		0x00000008,
		0x00022000,
		0x00000000,
		0x00000000,
		0x00022000,
		0x00022000,
		0x00022000,
		0x00000000,
		0x00022000,
		0x00000000,
		0x00000000,
		0x00022000,
		0x00000000,
		0x00022000,
		0x00022000,
		0x00022000,
		0x00000000,
		0x00000000,
		0x00022000,
		0x00000000,
		0x00000000,
		0x00022000,
		0x00000000,
		0x00000000,
		0x00022000,
		0x00000000,
		0x00022000,
		0x00022000,
		0x00000000,
		0x00022000,
		0x00000000,
		0x00000000,
		0x00022000,
		0x00022000,
		0x00022000,
		0x00000000,
		0x00022000,
		0x00000000,
		0x00000000,
		0x00022000,
		0x00022000,
		0x00022000,
		0x00000000,
		0x00022000,
		0x00000000,
		0x00000000,
		0x00022000,
		0x00000000,
		0x00000000,
		0x00022000,
		0x00000000,
		0x00000000,
		0x00022000,
		0x00022000,
		0x00022000,
		0x00000000,
		0x00000000,
		0x00000000,
		0x00022000,
		0x00022000,
		0x00000000,
		0x00000000,
		0x00000000,
		0x00022000,
		0x00022000,
		0x00000110,
		0x00000110,
		0x00000000,
		0x00080000,
		0x00000110,
		0x00080000,
		0x00080110,
		0x00000000,
		0x00080110,
		0x00080110,
		0x00080000,
		0x00000000,
		0x00080000,
		0x00000110,
		0x00000000,
		0x00080110,
		0x00000000,
		0x00080110,
		0x00000110,
		0x00000000,
		0x00080000,
		0x00000110,
		0x00080000,
		0x00000110,
		0x00080110,
		0x00000000,
		0x00000000,
		0x00080110,
		0x00000110,
		0x00080000,
		0x00080110,
		0x00080000,
		0x00080110,
		0x00000000,
		0x00080000,
		0x00080110,
		0x00080000,
		0x00000110,
		0x00000000,
		0x00080000,
		0x00000000,
		0x00080000,
		0x00000110,
		0x00000000,
		0x00000110,
		0x00080110,
		0x00080000,
		0x00000110,
		0x00080110,
		0x00080000,
		0x00000000,
		0x00080110,
		0x00000110,
		0x00000000,
		0x00080110,
		0x00000000,
		0x00080000,
		0x00000110,
		0x00080110,
		0x00080000,
		0x00000000,
		0x00080110,
		0x00000110,
		0x00000110,
		0x02200000,
		0x00000008,
		0x00000000,
		0x02200008,
		0x00000008,
		0x00000000,
		0x02200000,
		0x00000008,
		0x00000000,
		0x02200008,
		0x00000008,
		0x02200000,
		0x02200000,
		0x02200000,
		0x02200008,
		0x00000008,
		0x00000008,
		0x02200000,
		0x02200008,
		0x00000000,
		0x00000000,
		0x00000000,
		0x02200008,
		0x02200008,
		0x02200008,
		0x02200008,
		0x02200000,
		0x00000000,
		0x00000000,
		0x00000008,
		0x00000008,
		0x02200000,
		0x00000000,
		0x02200000,
		0x02200000,
		0x00000008,
		0x02200008,
		0x00000008,
		0x00000000,
		0x02200000,
		0x02200000,
		0x00000000,
		0x02200008,
		0x00000008,
		0x00000008,
		0x02200008,
		0x00000008,
		0x00000000,
		0x02200008,
		0x00000008,
		0x00000008,
		0x02200000,
		0x02200000,
		0x02200008,
		0x00000008,
		0x00000000,
		0x00000000,
		0x02200000,
		0x02200000,
		0x02200008,
		0x02200008,
		0x00000000,
		0x00000000,
		0x02200008,
		0x01100000,
		0x00000800,
		0x00000800,
		0x00000001,
		0x01100801,
		0x01100001,
		0x01100800,
		0x00000000,
		0x00000000,
		0x00000801,
		0x00000801,
		0x01100000,
		0x00000001,
		0x01100800,
		0x01100000,
		0x00000801,
		0x00000801,
		0x01100000,
		0x01100001,
		0x01100801,
		0x00000000,
		0x00000800,
		0x00000001,
		0x01100800,
		0x01100001,
		0x01100801,
		0x01100800,
		0x00000001,
		0x01100801,
		0x01100001,
		0x00000800,
		0x00000000,
		0x01100801,
		0x01100000,
		0x01100001,
		0x00000801,
		0x01100000,
		0x00000800,
		0x00000000,
		0x01100001,
		0x00000801,
		0x01100801,
		0x01100800,
		0x00000000,
		0x00000800,
		0x00000001,
		0x00000001,
		0x00000800,
		0x00000000,
		0x00000801,
		0x00000800,
		0x01100800,
		0x00000801,
		0x01100000,
		0x01100801,
		0x00000000,
		0x01100800,
		0x00000001,
		0x01100001,
		0x01100801,
		0x00000001,
		0x01100800,
		0x01100000,
		0x01100001,
		0x00000000,
		0x00000000,
		0x00000400,
		0x10000400,
		0x10000400,
		0x10000000,
		0x00000000,
		0x00000000,
		0x00000400,
		0x10000400,
		0x10000000,
		0x00000400,
		0x10000000,
		0x00000400,
		0x00000400,
		0x10000000,
		0x10000400,
		0x00000000,
		0x10000000,
		0x10000400,
		0x00000000,
		0x00000400,
		0x10000400,
		0x00000000,
		0x10000400,
		0x10000000,
		0x00000400,
		0x10000000,
		0x10000000,
		0x10000400,
		0x00000000,
		0x00000400,
		0x10000000,
		0x00000400,
		0x10000400,
		0x10000000,
		0x00000000,
		0x00000000,
		0x00000400,
		0x10000400,
		0x10000400,
		0x10000000,
		0x00000000,
		0x00000000,
		0x00000000,
		0x10000400,
		0x10000000,
		0x00000400,
		0x00000000,
		0x10000400,
		0x00000400,
		0x00000000,
		0x10000000,
		0x00000000,
		0x10000400,
		0x00000400,
		0x00000400,
		0x10000000,
		0x10000000,
		0x10000400,
		0x10000400,
		0x00000400,
		0x00000400,
		0x10000000,
		0x00000220,
		0x08000000,
		0x08000220,
		0x00000000,
		0x08000000,
		0x00000220,
		0x00000000,
		0x08000220,
		0x00000220,
		0x00000000,
		0x08000000,
		0x08000220,
		0x08000220,
		0x08000220,
		0x00000220,
		0x00000000,
		0x08000000,
		0x08000220,
		0x00000220,
		0x08000000,
		0x08000220,
		0x00000220,
		0x00000000,
		0x08000000,
		0x00000000,
		0x00000000,
		0x08000220,
		0x00000220,
		0x00000000,
		0x08000000,
		0x08000000,
		0x00000220,
		0x00000000,
		0x08000000,
		0x00000220,
		0x08000220,
		0x08000220,
		0x00000000,
		0x00000000,
		0x08000000,
		0x00000220,
		0x08000220,
		0x08000000,
		0x00000220,
		0x08000000,
		0x00000220,
		0x00000220,
		0x08000000,
		0x08000220,
		0x00000000,
		0x00000000,
		0x00000220,
		0x08000000,
		0x08000220,
		0x08000220,
		0x00000000,
		0x00000220,
		0x08000000,
		0x08000220,
		0x00000000,
		0x00000000,
		0x00000220,
		0x08000000,
		0x08000220,
		0x00080220,
		0x00080220,
		0x00000000,
		0x00000000,
		0x00080000,
		0x00000220,
		0x00080220,
		0x00080220,
		0x00000000,
		0x00080000,
		0x00000220,
		0x00000000,
		0x00000220,
		0x00080000,
		0x00080000,
		0x00080220,
		0x00000000,
		0x00000220,
		0x00000220,
		0x00080000,
		0x00080220,
		0x00080000,
		0x00000000,
		0x00000220,
		0x00080000,
		0x00000220,
		0x00080000,
		0x00080220,
		0x00000220,
		0x00000000,
		0x00080220,
		0x00000000,
		0x00000220,
		0x00000000,
		0x00080000,
		0x00080220,
		0x00000000,
		0x00080000,
		0x00000000,
		0x00000220,
		0x00080220,
		0x00080000,
		0x00080000,
		0x00000220,
		0x00080220,
		0x00000000,
		0x00000220,
		0x00080000,
		0x00080220,
		0x00000220,
		0x00080220,
		0x00080000,
		0x00000220,
		0x00000000,
		0x00080000,
		0x00080220,
		0x00000000,
		0x00080220,
		0x00000220,
		0x00000000,
		0x00080000,
		0x00080220,
		0x00000000,
		0x00000220,
		0x00000000
	};

  public byte	data[] = new byte[8];			/* 64 bits */
  
  public C_Block() //create a null filled C_Block
  {
  int	i;

  	for(i = 0; i < 8; i++) //May not be necessary
  		data[i] = 0;
  }
  
  public C_Block(byte known_data[]) //create a data filled C_Block
  									//from a byte array
  {	  this(known_data, 0);			
  }

  public C_Block(byte known_data[], int l) //create a data filled C_Block
  {														//from location l
  int	i, j;
  	  for(j = 0, i = l; j < 8 && i < known_data.length; j++, i++) 
	    data[j] = known_data[i];
  	  for(; j < 8 ; j++) //incase known_data is too short an array
  		data[j] = 0;
  }

  public C_Block(int int1, int int2) //create a data filled C_Block
  									 //from a pair of integers.
  {	  
  	  int_to_char(int1, int2);
  }

  public C_Block(int int_data[]) //create a data filled C_Block
  								 //from an integer array.
  {	  //we assume here that the array passed in has length 2
  	  //we should check and throw an exception if it doesn't
  	  int_to_char(int_data[0], int_data[1]);
  }

	/* Expand 32-bit input block according to E-permutation so that each
	output-byte contains 6 bits of output data */
	
	public C_Block (int L) // Create from a single Int
	{	//One int is expanded to fill the entire array
		des_expand_int(L);
	}

	public C_Block(String h, int radix) //create C_Block from numeric string.
	throws NumberFormatException
	{
		try
		{
			fromNumericString(h, radix);
		}
		catch(NumberFormatException e)
		{
			throw e;
		}
	}
	
	
  public String toString() //For printing debug statement
  {
  	return "C_Block = " + toHexString() + "\r";
  }
  
	public String toHexString() //was des_key_to_hex()
	{
	String text = uHex.toHex(data[0]);
	int i;

		for(i = 1; i < 8; i++) 
			text += uHex.toHex(data[i]);
		return text;
	}

	public void fromNumericString(String h, int radix) //was des_hex_to_key()
	throws NumberFormatException
	{	//We want a string of 16 hex digits to create an 8 byte array
     	if (h == null)
        	throw new NumberFormatException("null");
     	if (h.length() != 16)
        	throw new NumberFormatException("\""+ h +"\"" + " Bad Length");
	  int	i,j,k,a,d;
	
	  for(i = 0, k = 0; i < 8; i++) 
	  {
		a = 0; //next hex bytes value
		for(j = 0; j < 2; j++) 
		{
		  d = Character.digit(h.charAt(k++), radix); //get the next digit
		  if(d == -1)
			throw new NumberFormatException("\""+ h +"\""  + " Not a valid digit");
		  a = (a * radix) + d; //Merge last loop value with this one
	    }
	    data[i] = (byte) a; //store in next byte of C_Block.data
	  }
	}

  public Object clone() //Make a new copy of self
  {
  int	i;
  C_Block c = new C_Block();
  
  	for(i = 0; i < 8; i++) 
  		c.data[i] = data[i];
  	return c;
  }
	
	
    void des_expand_int(int L)
	{	//One int is expanded to fill the entire array
		data[0] = (byte) L;
		L >>>= 3; data[1] = (byte) L;
		L >>>= 4; data[2] = (byte) L;
		L >>>= 4; data[3] = (byte) L;
		L >>>= 4; data[4] = (byte) L;
		L >>>= 4; data[5] = (byte) L;
		L >>>= 4; data[6] = (byte) L;
		L >>>= 4; data[7] = (byte) L;
		data[0] <<= 1;
		data[7] |= data[0] << 4;
		L >>>= 4; data[0] |= (byte) L;
		
		int_to_char(first_int() & 0x3f3f3f3f, second_int() & 0x3f3f3f3f);
	}

	
    int des_unexpand()
	{ // Unexpand 8 6-bit bytes into one 32-bit block 
	  //The reverse of creating a C_Block with a single Int arg.
	  int	L;
	  int i;
	
		L = (int) data[7] & 0x000000ff;					/* 27 .. */
		L = (L << 4) | ((int) data[6] & 0x000000ff);	/* 23 .. */
		L = (L << 4) | ((int) data[5] & 0x000000ff);	/* 19 .. */
		L = (L << 4) | ((int) data[4] & 0x000000ff);	/* 15 .. */
		L = (L << 4) | ((int) data[3] & 0x000000ff);	/* 11 .. */
		L = (L << 4) | ((int) data[2] & 0x000000ff);	/* 7 .. */
		L = (L << 4) | ((int) data[1] & 0x000000ff);	/* 3 .. */
	 	L = (L << 3) | (((int)data[0] & 0x000000ff) >>> 1);	/* 0 .. */
	
	   return L;
	}

		
	int first_int()
	{	//use the first four bytes as a little endian int
		return ((int)  data[0]        & 0x000000ff) |  
			   (((int) data[1] <<  8) & 0x0000ff00) | 
			   (((int) data[2] << 16) & 0x00ff0000) |
			    ((int) data[3] << 24) ;
	}

	int second_int()
	{	//use the second four bytes as a little endian int
		return ((int)  data[4]        & 0x000000ff) |  
			   (((int) data[5] <<  8) & 0x0000ff00) | 
			   (((int) data[6] << 16) & 0x00ff0000) |
			    ((int) data[7] << 24) ;
	}
	
	int [] int_array()
	{
	int int_array[] = new int[2];
		
		int_array[0] = first_int();
		int_array[1] = second_int();
		return int_array;
	}
	
	void int_to_char(int v1, int v2) 
	{	//copy two ints into the byte data array.
		data[0] = ( byte ) v1;
		v1 >>>= 8;
		data[1] = ( byte ) v1;
		v1 >>>= 8;
		data[2] = ( byte ) v1;
		v1 >>>= 8;
		data[3] = ( byte ) v1;
		//second int
		data[4] = ( byte ) v2;
		v2 >>>= 8;
		data[5] = ( byte ) v2;
		v2 >>>= 8;
		data[6] = ( byte ) v2;
		v2 >>>= 8;
		data[7] = ( byte ) v2;
	}
	
	public void copy(C_Block c) 
	{
		System.arraycopy(c.data, 0, data, 0, 8);
	}
	
	public byte[] getDataRef()
	{
		return data;
	}
	
	public byte[] cloneData()
	{
	byte datacopy[] = new byte[8];
	
		System.arraycopy(data, 0, datacopy, 0, 8);
		return datacopy;
	}
	
	/* des_do_iperm and des_do_fperm use precomputed inline code to make
	   64-bit permutation. This is the fastest method that I know of to make
	   this on microVAX II */
	
	void des_do_iperm()
	{
	int 	L, R, L_result, R_result;

		L_result = R_result = 0;
		L = first_int(); R = second_int();
		if ((R & 0x02000000) != 0) L_result |= 0x00000001;
		if ((R & 0x00020000) != 0) L_result |= 0x00000002;
		if ((R & 0x00000200) != 0) L_result |= 0x00000004;
		if ((R & 0x00000002) != 0) L_result |= 0x00000008;
		if ((L & 0x02000000) != 0) L_result |= 0x00000010;
		if ((L & 0x00020000) != 0) L_result |= 0x00000020;
		if ((L & 0x00000200) != 0) L_result |= 0x00000040;
		if ((L & 0x00000002) != 0) L_result |= 0x00000080;
		if ((R & 0x08000000) != 0) L_result |= 0x00000100;
		if ((R & 0x00080000) != 0) L_result |= 0x00000200;
		if ((R & 0x00000800) != 0) L_result |= 0x00000400;
		if ((R & 0x00000008) != 0) L_result |= 0x00000800;
		if ((L & 0x08000000) != 0) L_result |= 0x00001000;
		if ((L & 0x00080000) != 0) L_result |= 0x00002000;
		if ((L & 0x00000800) != 0) L_result |= 0x00004000;
		if ((L & 0x00000008) != 0) L_result |= 0x00008000;
		if ((R & 0x20000000) != 0) L_result |= 0x00010000;
		if ((R & 0x00200000) != 0) L_result |= 0x00020000;
		if ((R & 0x00002000) != 0) L_result |= 0x00040000;
		if ((R & 0x00000020) != 0) L_result |= 0x00080000;
		if ((L & 0x20000000) != 0) L_result |= 0x00100000;
		if ((L & 0x00200000) != 0) L_result |= 0x00200000;
		if ((L & 0x00002000) != 0) L_result |= 0x00400000;
		if ((L & 0x00000020) != 0) L_result |= 0x00800000;
		if ((R & 0x80000000) != 0) L_result |= 0x01000000;
		if ((R & 0x00800000) != 0) L_result |= 0x02000000;
		if ((R & 0x00008000) != 0) L_result |= 0x04000000;
		if ((R & 0x00000080) != 0) L_result |= 0x08000000;
		if ((L & 0x80000000) != 0) L_result |= 0x10000000;
		if ((L & 0x00800000) != 0) L_result |= 0x20000000;
		if ((L & 0x00008000) != 0) L_result |= 0x40000000;
		if ((L & 0x00000080) != 0) L_result |= 0x80000000;
		if ((R & 0x01000000) != 0) R_result |= 0x00000001;
		if ((R & 0x00010000) != 0) R_result |= 0x00000002;
		if ((R & 0x00000100) != 0) R_result |= 0x00000004;
		if ((R & 0x00000001) != 0) R_result |= 0x00000008;
		if ((L & 0x01000000) != 0) R_result |= 0x00000010;
		if ((L & 0x00010000) != 0) R_result |= 0x00000020;
		if ((L & 0x00000100) != 0) R_result |= 0x00000040;
		if ((L & 0x00000001) != 0) R_result |= 0x00000080;
		if ((R & 0x04000000) != 0) R_result |= 0x00000100;
		if ((R & 0x00040000) != 0) R_result |= 0x00000200;
		if ((R & 0x00000400) != 0) R_result |= 0x00000400;
		if ((R & 0x00000004) != 0) R_result |= 0x00000800;
		if ((L & 0x04000000) != 0) R_result |= 0x00001000;
		if ((L & 0x00040000) != 0) R_result |= 0x00002000;
		if ((L & 0x00000400) != 0) R_result |= 0x00004000;
		if ((L & 0x00000004) != 0) R_result |= 0x00008000;
		if ((R & 0x10000000) != 0) R_result |= 0x00010000;
		if ((R & 0x00100000) != 0) R_result |= 0x00020000;
		if ((R & 0x00001000) != 0) R_result |= 0x00040000;
		if ((R & 0x00000010) != 0) R_result |= 0x00080000;
		if ((L & 0x10000000) != 0) R_result |= 0x00100000;
		if ((L & 0x00100000) != 0) R_result |= 0x00200000;
		if ((L & 0x00001000) != 0) R_result |= 0x00400000;
		if ((L & 0x00000010) != 0) R_result |= 0x00800000;
		if ((R & 0x40000000) != 0) R_result |= 0x01000000;
		if ((R & 0x00400000) != 0) R_result |= 0x02000000;
		if ((R & 0x00004000) != 0) R_result |= 0x04000000;
		if ((R & 0x00000040) != 0) R_result |= 0x08000000;
		if ((L & 0x40000000) != 0) R_result |= 0x10000000;
		if ((L & 0x00400000) != 0) R_result |= 0x20000000;
		if ((L & 0x00004000) != 0) R_result |= 0x40000000;
		if ((L & 0x00000040) != 0) R_result |= 0x80000000;
		int_to_char(L_result, R_result);
	}
	
	void des_do_fperm()
	{
	int 	L, R, L_result, R_result;

		L_result = R_result = 0;
		L = first_int(); R = second_int();
		if ((R & 0x00000080) != 0) L_result |= 0x00000001;
		if ((L & 0x00000080) != 0) L_result |= 0x00000002;
		if ((R & 0x00008000) != 0) L_result |= 0x00000004;
		if ((L & 0x00008000) != 0) L_result |= 0x00000008;
		if ((R & 0x00800000) != 0) L_result |= 0x00000010;
		if ((L & 0x00800000) != 0) L_result |= 0x00000020;
		if ((R & 0x80000000) != 0) L_result |= 0x00000040;
		if ((L & 0x80000000) != 0) L_result |= 0x00000080;
		if ((R & 0x00000040) != 0) L_result |= 0x00000100;
		if ((L & 0x00000040) != 0) L_result |= 0x00000200;
		if ((R & 0x00004000) != 0) L_result |= 0x00000400;
		if ((L & 0x00004000) != 0) L_result |= 0x00000800;
		if ((R & 0x00400000) != 0) L_result |= 0x00001000;
		if ((L & 0x00400000) != 0) L_result |= 0x00002000;
		if ((R & 0x40000000) != 0) L_result |= 0x00004000;
		if ((L & 0x40000000) != 0) L_result |= 0x00008000;
		if ((R & 0x00000020) != 0) L_result |= 0x00010000;
		if ((L & 0x00000020) != 0) L_result |= 0x00020000;
		if ((R & 0x00002000) != 0) L_result |= 0x00040000;
		if ((L & 0x00002000) != 0) L_result |= 0x00080000;
		if ((R & 0x00200000) != 0) L_result |= 0x00100000;
		if ((L & 0x00200000) != 0) L_result |= 0x00200000;
		if ((R & 0x20000000) != 0) L_result |= 0x00400000;
		if ((L & 0x20000000) != 0) L_result |= 0x00800000;
		if ((R & 0x00000010) != 0) L_result |= 0x01000000;
		if ((L & 0x00000010) != 0) L_result |= 0x02000000;
		if ((R & 0x00001000) != 0) L_result |= 0x04000000;
		if ((L & 0x00001000) != 0) L_result |= 0x08000000;
		if ((R & 0x00100000) != 0) L_result |= 0x10000000;
		if ((L & 0x00100000) != 0) L_result |= 0x20000000;
		if ((R & 0x10000000) != 0) L_result |= 0x40000000;
		if ((L & 0x10000000) != 0) L_result |= 0x80000000;
		if ((R & 0x00000008) != 0) R_result |= 0x00000001;
		if ((L & 0x00000008) != 0) R_result |= 0x00000002;
		if ((R & 0x00000800) != 0) R_result |= 0x00000004;
		if ((L & 0x00000800) != 0) R_result |= 0x00000008;
		if ((R & 0x00080000) != 0) R_result |= 0x00000010;
		if ((L & 0x00080000) != 0) R_result |= 0x00000020;
		if ((R & 0x08000000) != 0) R_result |= 0x00000040;
		if ((L & 0x08000000) != 0) R_result |= 0x00000080;
		if ((R & 0x00000004) != 0) R_result |= 0x00000100;
		if ((L & 0x00000004) != 0) R_result |= 0x00000200;
		if ((R & 0x00000400) != 0) R_result |= 0x00000400;
		if ((L & 0x00000400) != 0) R_result |= 0x00000800;
		if ((R & 0x00040000) != 0) R_result |= 0x00001000;
		if ((L & 0x00040000) != 0) R_result |= 0x00002000;
		if ((R & 0x04000000) != 0) R_result |= 0x00004000;
		if ((L & 0x04000000) != 0) R_result |= 0x00008000;
		if ((R & 0x00000002) != 0) R_result |= 0x00010000;
		if ((L & 0x00000002) != 0) R_result |= 0x00020000;
		if ((R & 0x00000200) != 0) R_result |= 0x00040000;
		if ((L & 0x00000200) != 0) R_result |= 0x00080000;
		if ((R & 0x00020000) != 0) R_result |= 0x00100000;
		if ((L & 0x00020000) != 0) R_result |= 0x00200000;
		if ((R & 0x02000000) != 0) R_result |= 0x00400000;
		if ((L & 0x02000000) != 0) R_result |= 0x00800000;
		if ((R & 0x00000001) != 0) R_result |= 0x01000000;
		if ((L & 0x00000001) != 0) R_result |= 0x02000000;
		if ((R & 0x00000100) != 0) R_result |= 0x04000000;
		if ((L & 0x00000100) != 0) R_result |= 0x08000000;
		if ((R & 0x00010000) != 0) R_result |= 0x10000000;
		if ((L & 0x00010000) != 0) R_result |= 0x20000000;
		if ((R & 0x01000000) != 0) R_result |= 0x40000000;
		if ((L & 0x01000000) != 0) R_result |= 0x80000000;
		int_to_char(L_result, R_result);
	}

	/* This function performs f()-function in a slightly modified form. It
	   starts with data which has gone through E-permutation and produces
	   data which is already E-permuted for the next iteration. */
	
	C_Block des_ecb_encrypt
	(
		Key_schedule 	schedule,
		boolean	encrypt,
		boolean	DES_NOIPERM,
		boolean	DES_NOFPERM
	)
	// input data is not modified. output is written after input has been read 
	// The least significant bit of input->data[0] is bit # 1 in DES-sepcification etc.
	{
	C_Block	ibuf = (C_Block) clone(); //make a copy of the data;
	int	 L[]; //holds expanded left hand integer
	int R[]; //holds expanded Right hand integer
	int Lnext[] = new int[2];
	int	i;
	
	  if (!DES_NOIPERM) 
	    ibuf.des_do_iperm();
	  
	  L = new C_Block(ibuf.first_int()).int_array();
	  R = new C_Block(ibuf.second_int()).int_array();
	  
	  for(i = 0; i < 16; i++) 
	  {
	    Lnext[0] = R[0]; //clone array
	    Lnext[1] = R[1]; 

	    des_fun(R, schedule, encrypt ? i : 15 - i);
	    R[0] ^= L[0];
	    R[1] ^= L[1];

	    L[0] = Lnext[0]; //clone array
	    L[1] = Lnext[1]; 
	  }
	  
	  ibuf.int_to_char( new C_Block(R).des_unexpand(), 
	  				    new C_Block(L).des_unexpand());
	
	  if (!DES_NOFPERM)
	    ibuf.des_do_fperm();

	  return ibuf; //return the copy
	}

	void des_fun( int R[],  Key_schedule 	schedule, int ki)
	{
	  int	F[] = new int [2];
	  int	R0, R1;
	  int		i;
	  C_Block   p;
	  
		  F[0] = R[0]; //copy the array. Why I don't know as we overwrite it.
		  F[1] = R[1];
		  //Break the OO rules and access schedule.data directly
		  F[0] ^= schedule.s_data[ki*2];
		  F[1] ^= schedule.s_data[ki*2+1];
		  p = new C_Block(F); //create C_Block from the int array
		  R0 = R1 = 0;
		  i = 0;
		  //Break the OO rules and access p.data directly
		  R0 ^= des_spe_table[i++ * 64 + p.data[0]];
		  R1 ^= des_spe_table[i++ * 64 + p.data[0]];
		  R0 ^= des_spe_table[i++ * 64 + p.data[1]];
		  R1 ^= des_spe_table[i++ * 64 + p.data[1]];
		  R0 ^= des_spe_table[i++ * 64 + p.data[2]];
		  R1 ^= des_spe_table[i++ * 64 + p.data[2]];
		  R0 ^= des_spe_table[i++ * 64 + p.data[3]];
		  R1 ^= des_spe_table[i++ * 64 + p.data[3]];
		  R0 ^= des_spe_table[i++ * 64 + p.data[4]];
		  R1 ^= des_spe_table[i++ * 64 + p.data[4]];
		  R0 ^= des_spe_table[i++ * 64 + p.data[5]];
		  R1 ^= des_spe_table[i++ * 64 + p.data[5]];
		  R0 ^= des_spe_table[i++ * 64 + p.data[6]];
		  R1 ^= des_spe_table[i++ * 64 + p.data[6]];
		  R0 ^= des_spe_table[i++ * 64 + p.data[7]];
		  R1 ^= des_spe_table[i++ * 64 + p.data[7]];
		  R[0] = R0; //modify the original array
		  R[1] = R1;
	}
	
	void Xor(C_Block c)
	{
    int i;
    	for(i = 0; i < 8; i++)
    		data[i] ^= c.data[i];
	}	
	
	public static int size()
	{
		return 8;
	}
} 

